from sqlalchemy import *
import sqlalchemy

class TablesCreation():

    def execute():
        engine = create_engine('mysql+mysqldb://root:adrien@127.0.0.1/stockcompaniesdb')
        metadata = MetaData()

        compagny_stock_financials = Table (
            'compagny_stock_financials', metadata,
            # Column('id', Integer, primary_key=True),
            Column('ticker_id', Integer),
            Column('ticker', String(20)),
            Column('period', String(1)),
            Column('calendar_date', Date),
            Column('report_period', Date),
            Column('updated', Date),
            Column('date_key', Date),
            Column('accumulated_other_comprehensive_income', Integer),
            Column('assets', Integer),
            Column('assets_current', Integer),
            Column('assets_non_current', Integer),
            Column('book_value_per_share', Float),
            Column('capital_expenditure', Integer),
            Column('cash_and_equivalents', Integer),
            Column('cost_of_revenue', Integer),
            Column('consolidated_income', Integer),
            Column('current_ratio', Float),
            Column('debt_to_equity_ratio', Float),
            Column('debt', Integer),
            Column('debt_current', Integer),
            Column('debt_non_current', Integer),
            Column('debt_usd', Integer),
            Column('deferred_revenue', Integer),
            Column('depreciation_amortization_and_accretion', Integer),
            Column('deposits', Integer),
            Column('dividend_yield', Integer),
            Column('dividends_per_basic_common_share', Integer),
            Column('earning_before_interest_taxes', Integer),
            Column('earnings_before_interest_taxes_depreciation_amortization', Integer),
            Column('ebitda_margin', Float),
            Column('earnings_before_interest_taxes_depreciation_amortization_usd', Integer),
            Column('earning_before_interest_taxes_usd', Integer),
            Column('earnings_before_tax', Integer),
            Column('earnings_per_basic_share', Float),
            Column('earnings_per_diluted_share', Float),
            Column('earnings_per_basic_share_usd', Float),
            Column('shareholders_equity', Integer),
            Column('shareholders_equity_usd', Integer),
            Column('enterprise_value', Integer),
            Column('enterprise_value_over_ebit', Integer),
            Column('enterprise_value_over_ebitda', Float),
            Column('free_cash_flow', Integer),
            Column('free_cash_flow_per_share', Float),
            Column('foreign_currency_usd_exchange_rate', Integer),
            Column('gross_profit', Integer),
            Column('gross_margin', Float),
            Column('goodwill_and_intangible_assets', Integer),
            Column('interest_expense', Integer),
            Column('invested_capital', Integer),
            Column('inventory', Integer),
            Column('investments', Integer),
            Column('investments_current', Integer),
            Column('investments_non_current', Integer),
            Column('total_liabilities', Integer),
            Column('current_liabilities', Integer),
            Column('liabilities_non_current', Integer),
            Column('market_capitalization', Integer),
            Column('net_cash_flow', Integer),
            Column('net_cash_flow_business_acquisitions_disposals', Integer),
            Column('issuance_equity_shares', Integer),
            Column('issuance_debt_securities', Integer),
            Column('payment_dividends_other_cash_distributions', Integer),
            Column('net_cash_flow_from_financing', Integer),
            Column('net_cash_flow_from_investing', Integer),
            Column('net_cash_flow_investment_acquisitions_disposals', Integer),
            Column('net_cash_flow_from_operations', Integer),
            Column('effect_of_exchange_rate_changes_on_cash', Integer),
            Column('net_income', Integer),
            Column('net_income_common_stock', Integer),
            Column('net_income_common_stock_usd', Integer),
            Column('net_loss_income_from_discontinued_operations', Integer),
            Column('net_income_to_non_controlling_interests', Integer),
            Column('profit_margin', Float),
            Column('operating_expenses', Integer),
            Column('operating_income', Integer),
            Column('trade_and_non_trade_payables', Integer),
            Column('payout_ratio', Integer),
            Column('price_to_book_value', Float),
            Column('price_earnings', Float),
            Column('price_to_earnings_ratio', Float),
            Column('property_plant_equipment_net', Integer),
            Column('preferred_dividends_income_statement_impact', Integer),
            Column('share_price_adjusted_close', Float),
            Column('price_sales', Float),
            Column('price_to_sales_ratio', Float),
            Column('trade_and_non_trade_receivables', Integer),
            Column('accumulated_retained_earnings_deficit', Integer),
            Column('revenues', Integer),
            Column('revenues_usd', Integer),
            Column('research_and_development_expense', Integer),
            Column('return_on_sales', Float),
            Column('share_based_compensation', Integer),
            Column('selling_general_and_administrative_expense', Integer),
            Column('share_factor', Integer),
            Column('shares', Integer),
            Column('weighted_average_shares', Integer),
            Column('weighted_average_shares_diluted', Integer),
            Column('sales_per_share', Float),
            Column('tangible_asset_value', Integer),
            Column('tax_assets', Integer),
            Column('income_tax_expense', Integer),
            Column('tax_liabilities', Integer),
            Column('tangible_assets_book_value_per_share', Float),
            Column('working_capital', Integer)#,
            #Column('aggregate_ticker_id', Integer, ForeignKey("compagny_aggregates.ticker_id"))
            )

        compagny_aggregates = Table (
            'compagny_aggregates', metadata,
            #Column('id', Integer, primary_key=True,autoincrement=True ),
            Column('ticker_id', Float),
            Column('v', Float),
            Column('vw', Float),
            Column('o', Float),
            Column('c', Float),
            Column('h', Float),
            Column('i', Float),
            Column('t', Float),
            Column('n', Float),
            Column('datetime', VARCHAR(50))#,
            #Column('financials_ticker_id', Integer, ForeignKey("compagny_stock_financials.ticker_id"))
            )

        metadata.create_all(engine)

def main():
   tablesCreation = TablesCreation()
   tablesCreation.execute()

if __name__ == "__main__":
    main()
